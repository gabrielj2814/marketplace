version: "3.8"
services:
  # api-app:
  #   image: docker.io/bitnami/laravel:9
  #   ports:
  #     - '3001:8000'
  #   environment:
  #     - DB_HOST=db-mysql
  #     - DB_PORT=3306
  #     - DB_USERNAME=root
  #     - DB_PASSWORD=1234
  #     - DB_DATABASE=db_vitacar
  #   volumes:
  #     - .:/app
  #   links:
  #     - db-mysql
  #     - soketi

    # Configuración del servicio Nginx
  nginx:
    image: nginx:1.24.0  # Especifica la versión 1.24.0 de la imagen de Nginx
    container_name: nginx  # Nombre personalizado para el contenedor de Nginx
    ports:
      - ${DOCKER_NGINX_PORT}  # Mapeo de puertos, utiliza una variable de entorno para definir el puerto
    volumes:
      - .:/var/www/html  # Monta el directorio actual en el directorio raíz de Nginx dentro del contenedor
      - ./docker-nginx/default.conf:/etc/nginx/conf.d/default.conf  # Monta un archivo de configuración personalizado de Nginx
    depends_on:
      - php  # Define una dependencia al servicio PHP, asegurando que PHP se inicie primero
    links:
      - db-mysql
      - soketi
      - php

  php:
      build:
        context: .  # El contexto de construcción para la imagen PHP, usualmente el directorio actual
        dockerfile: Dockerfile  # Especifica el Dockerfile a utilizar para construir la imagen
      extra_hosts:
        - host.docker.internal:host-gateway  # Configura un host adicional para facilitar la comunicación entre el contenedor y el host
      container_name: php  # Nombre personalizado para el contenedor PHP
      volumes:
        - ./:/var/www/html  # Monta el directorio actual al directorio raíz de la aplicación web dentro del contenedor
      ports:
        - ${DOCKER_PHP_PORT}  # Mapeo de puertos, utiliza una variable de entorno para definir el puerto de PHP
        - "8080:8080"
      environment:
        - XDEBUG_PORT=${DOCKER_XDEBUG_PORT}  # Configura el puerto XDebug usando una variable de entorno
      mem_limit: 6000M
#   node:
#     image: node:20-alpine3.18  # Puedes cambiar la versión de Node.js según tus necesidades
#     container_name: node
#     working_dir: /var/www/html  # Establece el directorio de trabajo
#     volumes:
#         - ./:/var/www/html  # Monta el directorio actual al directorio raíz de la aplicación web dentro del contenedor
#     ports:
#         - "${PUERTO_NODE}"  # Puedes cambiar el puerto según tus necesidades

   # Configuración del servicio Horizon, utilizado comúnmente con Laravel para la gestión de colas
  horizon:
    build: .  # Construye la imagen del servicio utilizando el contexto del directorio actual
    entrypoint: php  # Define 'php' como el punto de entrada para el contenedor
    command: artisan horizon  # Ejecuta 'artisan horizon' como el comando principal en el contenedor
    volumes:
      - .:/var/www/html  # Monta el directorio actual al directorio raíz de la aplicación web en el contenedor

  composer:
    image: composer  # Usa la imagen oficial de Composer
    container_name: composer  # Nombre personalizado para el contenedor Composer
    volumes:
      - .:/app  # Monta el directorio actual en el contenedor de Composer
    working_dir: /app  # Establece el directorio de trabajo dentro del contenedor Composer

  db-mysql:
    image: mysql:8.1.0
    ports:
      - "3002:3306"
    environment:
      - MYSQL_DATABASE=db_market
      - MYSQL_ROOT_PASSWORD=1234
    volumes:
      - v-db-mysql:/var/lib/mysql

  phpmyadmin:
    image: phpmyadmin:5.2.1-apache
    ports:
      - "3003:80"
    links:
      - db-mysql
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOST=db-mysql
      - PMA_PORT=3306
      - PMA_USER=root
      - PMA_PASSWORD=1234

  soketi:
    image: 'quay.io/soketi/soketi:latest-16-alpine'
    environment:
        SOKETI_DEBUG: '1'
        SOKETI_METRICS_SERVER_PORT: '9601'
    ports:
        - '${SOKETI_PORT:-6001}:6001'
        - '${SOKETI_METRICS_SERVER_PORT:-9601}:9601'

volumes:
  v-db-mysql:
